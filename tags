!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	./Makefile	/^	CC=clang$/;"	m
CC	./Makefile	/^	CC=g++$/;"	m
COMMON	./Makefile	/^COMMON = -std=c++11 -Wall $(STDCPP) -L$(LIB_DIRS) $(LIBS) -I$(INCLUDE_DIRS) -pthread$/;"	m
CountedOrderList	./CountedOrderList.h	/^   CountedOrderList()$/;"	f	class:OrderBook::CountedOrderList	access:public
CountedOrderList	./CountedOrderList.h	/^class CountedOrderList : public DLList<NODE> {$/;"	c	namespace:OrderBook	inherits:DLList
DB	./Utilities.h	15;"	d
DB	./Utilities.h	17;"	d
DLList	./DLList.h	/^   DLList()$/;"	f	class:OrderBook::DLList	access:public
DLList	./DLList.h	/^class DLList {$/;"	c	namespace:OrderBook
FAILASSERT	./Utilities.h	20;"	d
FHErrorTracker	./FHErrorTracker.h	/^   FHErrorTracker() {}$/;"	f	class:OrderBook::FHErrorTracker	access:private
FHErrorTracker	./FHErrorTracker.h	/^class FHErrorTracker {$/;"	c	namespace:OrderBook
FeedHandler	./FeedHandler.h	/^   FeedHandler()$/;"	f	class:OrderBook::FeedHandler	access:public
FeedHandler	./FeedHandler.h	/^class FeedHandler {$/;"	c	namespace:OrderBook
HRTimer	./HRTimer.h	/^   HRTimer()$/;"	f	class:OrderBook::HRTimer	access:public
HRTimer	./HRTimer.h	/^class HRTimer {$/;"	c	namespace:OrderBook
INCLUDE_DIRS	./Makefile	/^INCLUDE_DIRS = \\$/;"	m
LIBS	./Makefile	/^LIBS = \\$/;"	m
LIB_DIRS	./Makefile	/^LIB_DIRS = \\$/;"	m
LIKELY	./Utilities.h	22;"	d
LagHistogram	./LagHistogram.h	/^   LagHistogram(std::string title, uint32_t sample_count = 0)$/;"	f	class:LagHistogram	access:public
LagHistogram	./LagHistogram.h	/^class LagHistogram {$/;"	c
LagHistogram::LagHistogram	./LagHistogram.h	/^   LagHistogram(std::string title, uint32_t sample_count = 0)$/;"	f	class:LagHistogram	access:public
LagHistogram::add	./LagHistogram.h	/^   void add(uint64_t input) {$/;"	f	class:LagHistogram	access:public
LagHistogram::print	./LagHistogram.h	/^   void print() {$/;"	f	class:LagHistogram	access:public
LagHistogram::samples_	./LagHistogram.h	/^   std::vector<uint64_t> samples_;$/;"	m	class:LagHistogram	access:private
LagHistogram::title_	./LagHistogram.h	/^   std::string title_;$/;"	m	class:LagHistogram	access:private
Logger	./Logger.h	/^   Logger()$/;"	f	class:Logger	access:public
Logger	./Logger.h	/^class Logger {$/;"	c
Logger::Logger	./Logger.h	/^   Logger()$/;"	f	class:Logger	access:public
Logger::copyMessages	./Logger.h	/^   void copyMessages() {$/;"	f	class:Logger	access:private
Logger::exit_	./Logger.h	/^   std::atomic<bool> exit_;$/;"	m	class:Logger	access:private
Logger::init	./Logger.h	/^   void init() {$/;"	f	class:Logger	access:private
Logger::messages_	./Logger.h	/^   std::queue<std::string> messages_;$/;"	m	class:Logger	access:private
Logger::messages_available_	./Logger.h	/^   std::atomic<bool> messages_available_;$/;"	m	class:Logger	access:private
Logger::messages_to_print_	./Logger.h	/^   std::queue<std::string> messages_to_print_;$/;"	m	class:Logger	access:private
Logger::mutex_	./Logger.h	/^   std::mutex mutex_;$/;"	m	class:Logger	access:private
Logger::print	./Logger.h	/^   void print(std::string msg) {$/;"	f	class:Logger	access:public
Logger::printMessages	./Logger.h	/^   void printMessages() {$/;"	f	class:Logger	access:private
Logger::runLogger	./Logger.h	/^   void runLogger() {$/;"	f	class:Logger	access:public
Logger::stopLogger	./Logger.h	/^   void stopLogger() {$/;"	f	class:Logger	access:public
Logger::thread_	./Logger.h	/^   std::thread *thread_;$/;"	m	class:Logger	access:private
Logger::~Logger	./Logger.h	/^   ~Logger() {$/;"	f	class:Logger	access:public
MAXPRICE	./Utilities.h	12;"	d
MESSAGELENMAX	./Utilities.h	11;"	d
MESSAGELENMIN	./Utilities.h	10;"	d
MessageParser	./MessageParser.h	/^   MessageParser()$/;"	f	class:OrderBook::MessageParser	access:public
MessageParser	./MessageParser.h	/^class MessageParser {$/;"	c	namespace:OrderBook
MessageType	./Utilities.h	/^enum MessageType {$/;"	g
OrderBook	./CountedOrderList.h	/^namespace OrderBook {$/;"	n
OrderBook	./DLList.h	/^namespace OrderBook {$/;"	n
OrderBook	./FHErrorTracker.h	/^namespace OrderBook {$/;"	n
OrderBook	./FeedHandler.h	/^namespace OrderBook {$/;"	n
OrderBook	./HRTimer.h	/^namespace OrderBook {$/;"	n
OrderBook	./MessageParser.h	/^namespace OrderBook {$/;"	n
OrderBook	./OrderBook.h	/^   OrderBook()$/;"	f	class:OrderBook::OrderBook	access:public
OrderBook	./OrderBook.h	/^class OrderBook {$/;"	c	namespace:OrderBook
OrderBook	./OrderBook.h	/^namespace OrderBook {$/;"	n
OrderBook::CountedOrderList	./CountedOrderList.h	/^class CountedOrderList : public DLList<NODE> {$/;"	c	namespace:OrderBook	inherits:DLList
OrderBook::CountedOrderList::CountedOrderList	./CountedOrderList.h	/^   CountedOrderList()$/;"	f	class:OrderBook::CountedOrderList	access:public
OrderBook::CountedOrderList::addNode	./CountedOrderList.h	/^   void addNode(NODE *input) {$/;"	f	class:OrderBook::CountedOrderList	access:public
OrderBook::CountedOrderList::changeNodeQuantity	./CountedOrderList.h	/^   void changeNodeQuantity(NODE *input, uint32_t new_quantity) {$/;"	f	class:OrderBook::CountedOrderList	access:public
OrderBook::CountedOrderList::clearLevel	./CountedOrderList.h	/^   void clearLevel() {$/;"	f	class:OrderBook::CountedOrderList	access:public
OrderBook::CountedOrderList::getQuantity	./CountedOrderList.h	/^   uint32_t getQuantity() const { return level_quantity_; }$/;"	f	class:OrderBook::CountedOrderList	access:public
OrderBook::CountedOrderList::level_quantity_	./CountedOrderList.h	/^   uint32_t level_quantity_;$/;"	m	class:OrderBook::CountedOrderList	access:private
OrderBook::CountedOrderList::printLevel	./CountedOrderList.h	/^   void printLevel(char tag, char *&buffer, int &index, int &max_buffer) {$/;"	f	class:OrderBook::CountedOrderList	access:public
OrderBook::CountedOrderList::removeNode	./CountedOrderList.h	/^   void removeNode(NODE *input) {$/;"	f	class:OrderBook::CountedOrderList	access:public
OrderBook::CountedOrderList::~CountedOrderList	./CountedOrderList.h	/^   virtual ~CountedOrderList() {}$/;"	f	class:OrderBook::CountedOrderList	access:public
OrderBook::DLList	./DLList.h	/^class DLList {$/;"	c	namespace:OrderBook
OrderBook::DLList::DLList	./DLList.h	/^   DLList()$/;"	f	class:OrderBook::DLList	access:public
OrderBook::DLList::addNode	./DLList.h	/^   void addNode(NODE *input) {$/;"	f	class:OrderBook::DLList	access:public
OrderBook::DLList::getHead	./DLList.h	/^   NODE *getHead() const { return head_; }$/;"	f	class:OrderBook::DLList	access:public
OrderBook::DLList::getTail	./DLList.h	/^   NODE *getTail() const { return tail_; }$/;"	f	class:OrderBook::DLList	access:public
OrderBook::DLList::head_	./DLList.h	/^   NODE *head_;$/;"	m	class:OrderBook::DLList	access:private
OrderBook::DLList::printList	./DLList.h	/^   void printList() {$/;"	f	class:OrderBook::DLList	access:public
OrderBook::DLList::removeNode	./DLList.h	/^   void removeNode(NODE *target) {$/;"	f	class:OrderBook::DLList	access:public
OrderBook::DLList::tail_	./DLList.h	/^   NODE *tail_;$/;"	m	class:OrderBook::DLList	access:private
OrderBook::DLList::~DLList	./DLList.h	/^   virtual ~DLList() { }$/;"	f	class:OrderBook::DLList	access:public
OrderBook::FHErrorTracker	./FHErrorTracker.h	/^class FHErrorTracker {$/;"	c	namespace:OrderBook
OrderBook::FHErrorTracker::FHErrorTracker	./FHErrorTracker.h	/^   FHErrorTracker() {}$/;"	f	class:OrderBook::FHErrorTracker	access:private
OrderBook::FHErrorTracker::badCancel	./FHErrorTracker.h	/^   void badCancel() { ++bad_cancels_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
OrderBook::FHErrorTracker::bad_cancels_	./FHErrorTracker.h	/^   uint32_t bad_cancels_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
OrderBook::FHErrorTracker::bad_modifies_	./FHErrorTracker.h	/^   uint32_t bad_modifies_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
OrderBook::FHErrorTracker::corruptMessage	./FHErrorTracker.h	/^   void corruptMessage() { ++corrupt_messages_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
OrderBook::FHErrorTracker::corrupt_messages_	./FHErrorTracker.h	/^   uint32_t corrupt_messages_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
OrderBook::FHErrorTracker::crossedBook	./FHErrorTracker.h	/^   void crossedBook() { ++crossed_book_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
OrderBook::FHErrorTracker::crossed_book_	./FHErrorTracker.h	/^   uint32_t crossed_book_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
OrderBook::FHErrorTracker::duplicateAdd	./FHErrorTracker.h	/^   void duplicateAdd() { ++duplicate_add_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
OrderBook::FHErrorTracker::duplicate_add_	./FHErrorTracker.h	/^   uint32_t duplicate_add_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
OrderBook::FHErrorTracker::goodMessage	./FHErrorTracker.h	/^   void goodMessage() { ++good_messages_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
OrderBook::FHErrorTracker::good_messages_	./FHErrorTracker.h	/^   uint32_t good_messages_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
OrderBook::FHErrorTracker::init	./FHErrorTracker.h	/^   void init(){}$/;"	f	class:OrderBook::FHErrorTracker	access:public
OrderBook::FHErrorTracker::instance	./FHErrorTracker.h	/^   static FHErrorTracker *instance() {$/;"	f	class:OrderBook::FHErrorTracker	access:public
OrderBook::FHErrorTracker::instance_	./FHErrorTracker.cpp	/^OrderBook::FHErrorTracker* OrderBook::FHErrorTracker::instance_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	file:
OrderBook::FHErrorTracker::instance_	./FHErrorTracker.h	/^   static FHErrorTracker *instance_;$/;"	m	class:OrderBook::FHErrorTracker	access:private
OrderBook::FHErrorTracker::invalidID	./FHErrorTracker.h	/^   void invalidID() { ++invalid_ids_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
OrderBook::FHErrorTracker::invalidModify	./FHErrorTracker.h	/^   void invalidModify() { ++bad_modifies_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
OrderBook::FHErrorTracker::invalidPrice	./FHErrorTracker.h	/^   void invalidPrice() { ++invalid_prices_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
OrderBook::FHErrorTracker::invalidQuantity	./FHErrorTracker.h	/^   void invalidQuantity() { ++invalid_qtys_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
OrderBook::FHErrorTracker::invalid_ids_	./FHErrorTracker.h	/^   uint32_t invalid_ids_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
OrderBook::FHErrorTracker::invalid_prices_	./FHErrorTracker.h	/^   uint32_t invalid_prices_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
OrderBook::FHErrorTracker::invalid_qtys_	./FHErrorTracker.h	/^   uint32_t invalid_qtys_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
OrderBook::FHErrorTracker::printStatistics	./FHErrorTracker.h	/^   void printStatistics() {$/;"	f	class:OrderBook::FHErrorTracker	access:public
OrderBook::FHErrorTracker::tradeMissingOrders	./FHErrorTracker.h	/^   void tradeMissingOrders() { ++ trade_missing_orders_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
OrderBook::FHErrorTracker::trade_missing_orders_	./FHErrorTracker.h	/^   uint32_t trade_missing_orders_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
OrderBook::FHErrorTracker::~FHErrorTracker	./FHErrorTracker.h	/^   ~FHErrorTracker() {$/;"	f	class:OrderBook::FHErrorTracker	access:public
OrderBook::FeedHandler	./FeedHandler.h	/^class FeedHandler {$/;"	c	namespace:OrderBook
OrderBook::FeedHandler::FeedHandler	./FeedHandler.h	/^   FeedHandler()$/;"	f	class:OrderBook::FeedHandler	access:public
OrderBook::FeedHandler::OrderPtr	./FeedHandler.h	/^   typedef boost::shared_ptr<ORDERTYPE> OrderPtr;$/;"	t	class:OrderBook::FeedHandler	access:private
OrderBook::FeedHandler::add_	./FeedHandler.h	/^   LagHistogram add_;$/;"	m	class:OrderBook::FeedHandler	access:private
OrderBook::FeedHandler::book_print_	./FeedHandler.h	/^   LagHistogram book_print_;$/;"	m	class:OrderBook::FeedHandler	access:private
OrderBook::FeedHandler::midquote_	./FeedHandler.h	/^   LagHistogram midquote_;$/;"	m	class:OrderBook::FeedHandler	access:private
OrderBook::FeedHandler::modify_	./FeedHandler.h	/^   LagHistogram modify_;$/;"	m	class:OrderBook::FeedHandler	access:private
OrderBook::FeedHandler::order_book_	./FeedHandler.h	/^   OrderBook<ORDERIDTYPE, ORDERTYPE> order_book_;$/;"	m	class:OrderBook::FeedHandler	access:private
OrderBook::FeedHandler::parser_	./FeedHandler.h	/^   MessageParser parser_;$/;"	m	class:OrderBook::FeedHandler	access:private
OrderBook::FeedHandler::printCurrentOrderBook	./FeedHandler.h	/^   void printCurrentOrderBook() {$/;"	f	class:OrderBook::FeedHandler	access:public
OrderBook::FeedHandler::processMessage	./FeedHandler.h	/^   void processMessage(char *line) {$/;"	f	class:OrderBook::FeedHandler	access:public
OrderBook::FeedHandler::remove_	./FeedHandler.h	/^   LagHistogram remove_;$/;"	m	class:OrderBook::FeedHandler	access:private
OrderBook::FeedHandler::timer_	./FeedHandler.h	/^   HRTimer timer_;$/;"	m	class:OrderBook::FeedHandler	access:private
OrderBook::FeedHandler::trade_	./FeedHandler.h	/^   LagHistogram trade_;$/;"	m	class:OrderBook::FeedHandler	access:private
OrderBook::FeedHandler::~FeedHandler	./FeedHandler.h	/^   ~FeedHandler() {$/;"	f	class:OrderBook::FeedHandler	access:public
OrderBook::HRTimer	./HRTimer.h	/^class HRTimer {$/;"	c	namespace:OrderBook
OrderBook::HRTimer::HRTimer	./HRTimer.h	/^   HRTimer()$/;"	f	class:OrderBook::HRTimer	access:public
OrderBook::HRTimer::RDTSC	./HRTimer.h	/^   inline int64_t RDTSC() {$/;"	f	class:OrderBook::HRTimer	access:private
OrderBook::HRTimer::hz_	./HRTimer.h	/^   uint64_t hz_;$/;"	m	class:OrderBook::HRTimer	access:private
OrderBook::HRTimer::start	./HRTimer.h	/^   inline void start() {$/;"	f	class:OrderBook::HRTimer	access:public
OrderBook::HRTimer::start_	./HRTimer.h	/^   uint64_t start_;$/;"	m	class:OrderBook::HRTimer	access:private
OrderBook::HRTimer::stop	./HRTimer.h	/^   inline uint64_t stop() {$/;"	f	class:OrderBook::HRTimer	access:public
OrderBook::MessageParser	./MessageParser.h	/^class MessageParser {$/;"	c	namespace:OrderBook
OrderBook::MessageParser::MessageParser	./MessageParser.h	/^   MessageParser()$/;"	f	class:OrderBook::MessageParser	access:public
OrderBook::MessageParser::failOrderParse	./MessageParser.h	/^   inline void failOrderParse(OrderLevelEntry &ole, ParseStatus status);$/;"	p	class:OrderBook::MessageParser	access:private
OrderBook::MessageParser::failOrderParse	./MessageParser.h	/^inline void MessageParser::failOrderParse(OrderLevelEntry &ole, ParseStatus status) {$/;"	f	class:OrderBook::MessageParser
OrderBook::MessageParser::failTradeParse	./MessageParser.h	/^   inline void failTradeParse(TradeMessage &tm, ParseStatus status);$/;"	p	class:OrderBook::MessageParser	access:private
OrderBook::MessageParser::failTradeParse	./MessageParser.h	/^inline void MessageParser::failTradeParse(TradeMessage &tm, ParseStatus status) {$/;"	f	class:OrderBook::MessageParser
OrderBook::MessageParser::getMessageType	./MessageParser.h	/^   inline MessageType getMessageType(char *message);$/;"	p	class:OrderBook::MessageParser	access:public
OrderBook::MessageParser::getMessageType	./MessageParser.h	/^inline MessageType MessageParser::getMessageType(char *tk_msg) {$/;"	f	class:OrderBook::MessageParser
OrderBook::MessageParser::parseOrder	./MessageParser.h	/^   inline void parseOrder(char *tk_msg, OrderLevelEntry &ole);$/;"	p	class:OrderBook::MessageParser	access:public
OrderBook::MessageParser::parseOrder	./MessageParser.h	/^inline void MessageParser::parseOrder(char *tk_msg, OrderLevelEntry &ole) {$/;"	f	class:OrderBook::MessageParser
OrderBook::MessageParser::parseTrade	./MessageParser.h	/^   inline void parseTrade(char *tk_msg, TradeMessage &tm);$/;"	p	class:OrderBook::MessageParser	access:public
OrderBook::MessageParser::parseTrade	./MessageParser.h	/^inline void MessageParser::parseTrade(char *tk_msg, TradeMessage &tm) {$/;"	f	class:OrderBook::MessageParser
OrderBook::MessageParser::reportStatus	./MessageParser.h	/^   inline void reportStatus(ParseStatus status);$/;"	p	class:OrderBook::MessageParser	access:private
OrderBook::MessageParser::reportStatus	./MessageParser.h	/^inline void MessageParser::reportStatus(ParseStatus status) {$/;"	f	class:OrderBook::MessageParser
OrderBook::MessageParser::tokenizeAndConvertToDouble	./MessageParser.h	/^   inline ParseStatus tokenizeAndConvertToDouble(char *tk_msg, double &dest);$/;"	p	class:OrderBook::MessageParser	access:private
OrderBook::MessageParser::tokenizeAndConvertToDouble	./MessageParser.h	/^inline ParseStatus MessageParser::tokenizeAndConvertToDouble(char *tk_msg, double &dest) {$/;"	f	class:OrderBook::MessageParser
OrderBook::MessageParser::tokenizeAndConvertToUint	./MessageParser.h	/^   inline ParseStatus tokenizeAndConvertToUint(char *tk_msg, uint32_t &dest);$/;"	p	class:OrderBook::MessageParser	access:private
OrderBook::MessageParser::tokenizeAndConvertToUint	./MessageParser.h	/^inline ParseStatus MessageParser::tokenizeAndConvertToUint(char *tk_msg, uint32_t &dest) {$/;"	f	class:OrderBook::MessageParser
OrderBook::MessageParser::~MessageParser	./MessageParser.h	/^   ~MessageParser() {}$/;"	f	class:OrderBook::MessageParser	access:public
OrderBook::OrderBook	./OrderBook.h	/^class OrderBook {$/;"	c	namespace:OrderBook
OrderBook::OrderBook::OrderBook	./OrderBook.h	/^   OrderBook()$/;"	f	class:OrderBook::OrderBook	access:public
OrderBook::OrderBook::OrderHash	./OrderBook.h	/^   typedef std::unordered_map<ORDERIDTYPE, OrderPtr> OrderHash;$/;"	t	class:OrderBook::OrderBook	access:public
OrderBook::OrderBook::OrderListMap	./OrderBook.h	/^   typedef std::map<unsigned long long, CountedOrderList<OrderPtr>> OrderListMap;$/;"	t	class:OrderBook::OrderBook	access:public
OrderBook::OrderBook::OrderPtr	./OrderBook.h	/^   typedef boost::shared_ptr<ORDERTYPE> OrderPtr;$/;"	t	class:OrderBook::OrderBook	access:public
OrderBook::OrderBook::addOrder	./OrderBook.h	/^   void addOrder(OrderPtr &ole) {$/;"	f	class:OrderBook::OrderBook	access:public
OrderBook::OrderBook::buy_book_map_	./OrderBook.h	/^   OrderListMap buy_book_map_;$/;"	m	class:OrderBook::OrderBook	access:private
OrderBook::OrderBook::checkCross	./OrderBook.h	/^   void checkCross() const {$/;"	f	class:OrderBook::OrderBook	access:public
OrderBook::OrderBook::getLoggerReference	./OrderBook.h	/^   Logger &getLoggerReference() {$/;"	f	class:OrderBook::OrderBook	access:public
OrderBook::OrderBook::handleTrade	./OrderBook.h	/^   void handleTrade(TradeMessage &tm) {$/;"	f	class:OrderBook::OrderBook	access:public
OrderBook::OrderBook::logger_	./OrderBook.h	/^   Logger logger_;$/;"	m	class:OrderBook::OrderBook	access:private
OrderBook::OrderBook::modifyOrder	./OrderBook.h	/^   void modifyOrder(OrderPtr &ole) {$/;"	f	class:OrderBook::OrderBook	access:public
OrderBook::OrderBook::orders_	./OrderBook.h	/^   OrderHash orders_;$/;"	m	class:OrderBook::OrderBook	access:private
OrderBook::OrderBook::printBook	./OrderBook.h	/^   void printBook() {$/;"	f	class:OrderBook::OrderBook	access:public
OrderBook::OrderBook::printMidpoint	./OrderBook.h	/^   void printMidpoint() {$/;"	f	class:OrderBook::OrderBook	access:public
OrderBook::OrderBook::recent_trade_price_	./OrderBook.h	/^   unsigned long long recent_trade_price_;$/;"	m	class:OrderBook::OrderBook	access:private
OrderBook::OrderBook::recent_trade_qty_	./OrderBook.h	/^   uint32_t recent_trade_qty_;$/;"	m	class:OrderBook::OrderBook	access:private
OrderBook::OrderBook::removeOrder	./OrderBook.h	/^   void removeOrder(OrderPtr &ole) {$/;"	f	class:OrderBook::OrderBook	access:public
OrderBook::OrderBook::sell_book_map_	./OrderBook.h	/^   OrderListMap sell_book_map_;$/;"	m	class:OrderBook::OrderBook	access:private
OrderBook::OrderBook::~OrderBook	./OrderBook.h	/^   ~OrderBook() {$/;"	f	class:OrderBook::OrderBook	access:public
OrderBook::ParseStatus	./MessageParser.h	/^enum ParseStatus {$/;"	g	namespace:OrderBook
OrderBook::ePS_BadID	./MessageParser.h	/^   ePS_BadID,$/;"	e	enum:OrderBook::ParseStatus
OrderBook::ePS_BadPrice	./MessageParser.h	/^   ePS_BadPrice,$/;"	e	enum:OrderBook::ParseStatus
OrderBook::ePS_BadQuantity	./MessageParser.h	/^   ePS_BadQuantity,$/;"	e	enum:OrderBook::ParseStatus
OrderBook::ePS_CorruptMessage	./MessageParser.h	/^   ePS_CorruptMessage,$/;"	e	enum:OrderBook::ParseStatus
OrderBook::ePS_GenericBadValue	./MessageParser.h	/^   ePS_GenericBadValue$/;"	e	enum:OrderBook::ParseStatus
OrderBook::ePS_Good	./MessageParser.h	/^   ePS_Good,$/;"	e	enum:OrderBook::ParseStatus
OrderHash	./OrderBook.h	/^   typedef std::unordered_map<ORDERIDTYPE, OrderPtr> OrderHash;$/;"	t	class:OrderBook::OrderBook	access:public
OrderLevelEntry	./Utilities.h	/^   OrderLevelEntry()$/;"	f	struct:OrderLevelEntry	access:public
OrderLevelEntry	./Utilities.h	/^struct OrderLevelEntry {$/;"	s
OrderLevelEntry::OrderLevelEntry	./Utilities.h	/^   OrderLevelEntry()$/;"	f	struct:OrderLevelEntry	access:public
OrderLevelEntry::next_	./Utilities.h	/^   OrderLevelEntry *next_;$/;"	m	struct:OrderLevelEntry	access:public
OrderLevelEntry::order_id_	./Utilities.h	/^   uint32_t order_id_;$/;"	m	struct:OrderLevelEntry	access:public
OrderLevelEntry::order_price_	./Utilities.h	/^   unsigned long long order_price_;$/;"	m	struct:OrderLevelEntry	access:public
OrderLevelEntry::order_qty_	./Utilities.h	/^   uint32_t order_qty_;$/;"	m	struct:OrderLevelEntry	access:public
OrderLevelEntry::order_side_	./Utilities.h	/^   Side order_side_;$/;"	m	struct:OrderLevelEntry	access:public
OrderLevelEntry::previous_	./Utilities.h	/^   OrderLevelEntry *previous_;$/;"	m	struct:OrderLevelEntry	access:public
OrderLevelEntry::printSelf	./Utilities.h	/^   void printSelf() {$/;"	f	struct:OrderLevelEntry	access:public
OrderListMap	./OrderBook.h	/^   typedef std::map<unsigned long long, CountedOrderList<OrderPtr>> OrderListMap;$/;"	t	class:OrderBook::OrderBook	access:public
OrderPtr	./FeedHandler.h	/^   typedef boost::shared_ptr<ORDERTYPE> OrderPtr;$/;"	t	class:OrderBook::FeedHandler	access:private
OrderPtr	./OrderBook.h	/^   typedef boost::shared_ptr<ORDERTYPE> OrderPtr;$/;"	t	class:OrderBook::OrderBook	access:public
ParseStatus	./MessageParser.h	/^enum ParseStatus {$/;"	g	namespace:OrderBook
RDTSC	./HRTimer.h	/^   inline int64_t RDTSC() {$/;"	f	class:OrderBook::HRTimer	access:private
SOURCES	./Makefile	/^SOURCES = \\$/;"	m
STARTPROFILE	./FeedHandler.h	14;"	d
STARTPROFILE	./FeedHandler.h	17;"	d
STDCPP	./Makefile	/^	STDCPP=$/;"	m
STDCPP	./Makefile	/^	STDCPP=-lstdc++$/;"	m
STOPPROFILE	./FeedHandler.h	15;"	d
STOPPROFILE	./FeedHandler.h	18;"	d
Side	./Utilities.h	/^enum Side {$/;"	g
TRUE	./Logger.h	13;"	d
TestFunction	./Tester.cpp	/^typedef bool (*TestFunction)();$/;"	t	file:
TestFunctionPair	./Tester.cpp	/^   TestFunctionPair(std::string name, TestFunction function)$/;"	f	struct:TestFunctionPair	access:public
TestFunctionPair	./Tester.cpp	/^struct TestFunctionPair {$/;"	s	file:
TestFunctionPair::TestFunctionPair	./Tester.cpp	/^   TestFunctionPair(std::string name, TestFunction function)$/;"	f	struct:TestFunctionPair	access:public
TestFunctionPair::function_	./Tester.cpp	/^   TestFunction function_;$/;"	m	struct:TestFunctionPair	file:	access:public
TestFunctionPair::test_name_	./Tester.cpp	/^   std::string test_name_;$/;"	m	struct:TestFunctionPair	file:	access:public
TradeMessage	./Utilities.h	/^struct TradeMessage {$/;"	s
TradeMessage::printSelf	./Utilities.h	/^   void printSelf() {$/;"	f	struct:TradeMessage	access:public
TradeMessage::trade_price_	./Utilities.h	/^   unsigned long long trade_price_;$/;"	m	struct:TradeMessage	access:public
TradeMessage::trade_qty_	./Utilities.h	/^   uint32_t trade_qty_;$/;"	m	struct:TradeMessage	access:public
UNLIKELY	./Utilities.h	23;"	d
__COUNTEDORDERLIST__	./CountedOrderList.h	2;"	d
__DLLIST__	./DLList.h	2;"	d
__FEEDHANDLER__	./FeedHandler.h	2;"	d
__FHERRORTRACKER__	./FHErrorTracker.h	2;"	d
__HRTIMER__	./HRTimer.h	2;"	d
__LAGHISTOGRAM__	./LagHistogram.h	2;"	d
__LOGGER__	./Logger.h	2;"	d
__MESSAGEPARSER__	./MessageParser.h	2;"	d
__ORDERBOOK__	./OrderBook.h	2;"	d
__TYPES__	./Utilities.h	2;"	d
add	./LagHistogram.h	/^   void add(uint64_t input) {$/;"	f	class:LagHistogram	access:public
addBuy	./OrderGenerator.pl	/^sub addBuy {$/;"	s
addNode	./CountedOrderList.h	/^   void addNode(NODE *input) {$/;"	f	class:OrderBook::CountedOrderList	access:public
addNode	./DLList.h	/^   void addNode(NODE *input) {$/;"	f	class:OrderBook::DLList	access:public
addOrder	./OrderBook.h	/^   void addOrder(OrderPtr &ole) {$/;"	f	class:OrderBook::OrderBook	access:public
addSell	./OrderGenerator.pl	/^sub addSell {$/;"	s
addTest	./Tester.cpp	/^void addTest(std::string name, TestFunction func) {$/;"	f
add_	./FeedHandler.h	/^   LagHistogram add_;$/;"	m	class:OrderBook::FeedHandler	access:private
badCancel	./FHErrorTracker.h	/^   void badCancel() { ++bad_cancels_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
badQuantity	./OrderGenerator.pl	/^sub badQuantity {$/;"	s
bad_cancels_	./FHErrorTracker.h	/^   uint32_t bad_cancels_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
bad_modifies_	./FHErrorTracker.h	/^   uint32_t bad_modifies_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
book_print_	./FeedHandler.h	/^   LagHistogram book_print_;$/;"	m	class:OrderBook::FeedHandler	access:private
buy_book_map_	./OrderBook.h	/^   OrderListMap buy_book_map_;$/;"	m	class:OrderBook::OrderBook	access:private
cancelMissing	./OrderGenerator.pl	/^sub cancelMissing {$/;"	s
changeNodeQuantity	./CountedOrderList.h	/^   void changeNodeQuantity(NODE *input, uint32_t new_quantity) {$/;"	f	class:OrderBook::CountedOrderList	access:public
checkCross	./OrderBook.h	/^   void checkCross() const {$/;"	f	class:OrderBook::OrderBook	access:public
checkIfOrderIDExists	./OrderGenerator.pl	/^sub checkIfOrderIDExists {$/;"	s
checkIfPriceLevelExists	./OrderGenerator.pl	/^sub checkIfPriceLevelExists {$/;"	s
clearLevel	./CountedOrderList.h	/^   void clearLevel() {$/;"	f	class:OrderBook::CountedOrderList	access:public
clearLevelByPriceIfEmpty	./OrderGenerator.pl	/^sub clearLevelByPriceIfEmpty {$/;"	s
copyMessages	./Logger.h	/^   void copyMessages() {$/;"	f	class:Logger	access:private
corrupt	./OrderGenerator.pl	/^sub corrupt {$/;"	s
corruptMessage	./FHErrorTracker.h	/^   void corruptMessage() { ++corrupt_messages_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
corrupt_messages_	./FHErrorTracker.h	/^   uint32_t corrupt_messages_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
crossedBook	./FHErrorTracker.h	/^   void crossedBook() { ++crossed_book_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
crossed_book_	./FHErrorTracker.h	/^   uint32_t crossed_book_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
duplicateAdd	./FHErrorTracker.h	/^   void duplicateAdd() { ++duplicate_add_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
duplicateAdd	./OrderGenerator.pl	/^sub duplicateAdd {$/;"	s
duplicate_add_	./FHErrorTracker.h	/^   uint32_t duplicate_add_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
eMT_Add	./Utilities.h	/^   eMT_Add,$/;"	e	enum:MessageType
eMT_Modify	./Utilities.h	/^   eMT_Modify,$/;"	e	enum:MessageType
eMT_Remove	./Utilities.h	/^   eMT_Remove,$/;"	e	enum:MessageType
eMT_Trade	./Utilities.h	/^   eMT_Trade$/;"	e	enum:MessageType
eMT_Unknown	./Utilities.h	/^   eMT_Unknown,$/;"	e	enum:MessageType
ePS_BadID	./MessageParser.h	/^   ePS_BadID,$/;"	e	enum:OrderBook::ParseStatus
ePS_BadPrice	./MessageParser.h	/^   ePS_BadPrice,$/;"	e	enum:OrderBook::ParseStatus
ePS_BadQuantity	./MessageParser.h	/^   ePS_BadQuantity,$/;"	e	enum:OrderBook::ParseStatus
ePS_CorruptMessage	./MessageParser.h	/^   ePS_CorruptMessage,$/;"	e	enum:OrderBook::ParseStatus
ePS_GenericBadValue	./MessageParser.h	/^   ePS_GenericBadValue$/;"	e	enum:OrderBook::ParseStatus
ePS_Good	./MessageParser.h	/^   ePS_Good,$/;"	e	enum:OrderBook::ParseStatus
eS_Buy	./Utilities.h	/^   eS_Buy,$/;"	e	enum:Side
eS_Sell	./Utilities.h	/^   eS_Sell$/;"	e	enum:Side
eS_Unknown	./Utilities.h	/^   eS_Unknown,$/;"	e	enum:Side
exit_	./Logger.h	/^   std::atomic<bool> exit_;$/;"	m	class:Logger	access:private
failOrderParse	./MessageParser.h	/^   inline void failOrderParse(OrderLevelEntry &ole, ParseStatus status);$/;"	p	class:OrderBook::MessageParser	access:private
failOrderParse	./MessageParser.h	/^inline void MessageParser::failOrderParse(OrderLevelEntry &ole, ParseStatus status) {$/;"	f	class:OrderBook::MessageParser
failTradeParse	./MessageParser.h	/^   inline void failTradeParse(TradeMessage &tm, ParseStatus status);$/;"	p	class:OrderBook::MessageParser	access:private
failTradeParse	./MessageParser.h	/^inline void MessageParser::failTradeParse(TradeMessage &tm, ParseStatus status) {$/;"	f	class:OrderBook::MessageParser
function_	./Tester.cpp	/^   TestFunction function_;$/;"	m	struct:TestFunctionPair	file:	access:public
getHashMax	./OrderGenerator.pl	/^sub getHashMax {$/;"	s
getHashMin	./OrderGenerator.pl	/^sub getHashMin {$/;"	s
getHead	./DLList.h	/^   NODE *getHead() const { return head_; }$/;"	f	class:OrderBook::DLList	access:public
getLoggerReference	./OrderBook.h	/^   Logger &getLoggerReference() {$/;"	f	class:OrderBook::OrderBook	access:public
getMessageType	./MessageParser.h	/^   inline MessageType getMessageType(char *message);$/;"	p	class:OrderBook::MessageParser	access:public
getMessageType	./MessageParser.h	/^inline MessageType MessageParser::getMessageType(char *tk_msg) {$/;"	f	class:OrderBook::MessageParser
getQuantity	./CountedOrderList.h	/^   uint32_t getQuantity() const { return level_quantity_; }$/;"	f	class:OrderBook::CountedOrderList	access:public
getRandomOrder	./OrderGenerator.pl	/^sub getRandomOrder {$/;"	s
getRandomOrderID	./OrderGenerator.pl	/^sub getRandomOrderID {$/;"	s
getTail	./DLList.h	/^   NODE *getTail() const { return tail_; }$/;"	f	class:OrderBook::DLList	access:public
goodMessage	./FHErrorTracker.h	/^   void goodMessage() { ++good_messages_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
good_messages_	./FHErrorTracker.h	/^   uint32_t good_messages_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
growBuffer	./Utilities.h	/^void growBuffer(char *&buf, int &max_buffer) {$/;"	f
handleTrade	./OrderBook.h	/^   void handleTrade(TradeMessage &tm) {$/;"	f	class:OrderBook::OrderBook	access:public
head_	./DLList.h	/^   NODE *head_;$/;"	m	class:OrderBook::DLList	access:private
hz_	./HRTimer.h	/^   uint64_t hz_;$/;"	m	class:OrderBook::HRTimer	access:private
init	./FHErrorTracker.h	/^   void init(){}$/;"	f	class:OrderBook::FHErrorTracker	access:public
init	./Logger.h	/^   void init() {$/;"	f	class:Logger	access:private
initTests	./Tester.cpp	/^void initTests() {$/;"	f
instance	./FHErrorTracker.h	/^   static FHErrorTracker *instance() {$/;"	f	class:OrderBook::FHErrorTracker	access:public
instance_	./FHErrorTracker.cpp	/^OrderBook::FHErrorTracker* OrderBook::FHErrorTracker::instance_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	file:
instance_	./FHErrorTracker.h	/^   static FHErrorTracker *instance_;$/;"	m	class:OrderBook::FHErrorTracker	access:private
invalidID	./FHErrorTracker.h	/^   void invalidID() { ++invalid_ids_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
invalidID	./OrderGenerator.pl	/^sub invalidID {$/;"	s
invalidModify	./FHErrorTracker.h	/^   void invalidModify() { ++bad_modifies_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
invalidPrice	./FHErrorTracker.h	/^   void invalidPrice() { ++invalid_prices_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
invalidQuantity	./FHErrorTracker.h	/^   void invalidQuantity() { ++invalid_qtys_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
invalid_ids_	./FHErrorTracker.h	/^   uint32_t invalid_ids_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
invalid_prices_	./FHErrorTracker.h	/^   uint32_t invalid_prices_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
invalid_qtys_	./FHErrorTracker.h	/^   uint32_t invalid_qtys_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
level_quantity_	./CountedOrderList.h	/^   uint32_t level_quantity_;$/;"	m	class:OrderBook::CountedOrderList	access:private
logger_	./OrderBook.h	/^   Logger logger_;$/;"	m	class:OrderBook::OrderBook	access:private
main	./OrderGenerator.pl	/^sub main {$/;"	s
main	./Tester.cpp	/^int main (int argc, char** argv) {$/;"	f
main	./main.cpp	/^int main(int argc, char **argv) {$/;"	f
messages_	./Logger.h	/^   std::queue<std::string> messages_;$/;"	m	class:Logger	access:private
messages_available_	./Logger.h	/^   std::atomic<bool> messages_available_;$/;"	m	class:Logger	access:private
messages_to_print_	./Logger.h	/^   std::queue<std::string> messages_to_print_;$/;"	m	class:Logger	access:private
midquote_	./FeedHandler.h	/^   LagHistogram midquote_;$/;"	m	class:OrderBook::FeedHandler	access:private
missingModify	./OrderGenerator.pl	/^sub missingModify {$/;"	s
modify	./OrderGenerator.pl	/^sub modify {$/;"	s
modifyOrder	./OrderBook.h	/^   void modifyOrder(OrderPtr &ole) {$/;"	f	class:OrderBook::OrderBook	access:public
modify_	./FeedHandler.h	/^   LagHistogram modify_;$/;"	m	class:OrderBook::FeedHandler	access:private
mutex_	./Logger.h	/^   std::mutex mutex_;$/;"	m	class:Logger	access:private
next_	./Utilities.h	/^   OrderLevelEntry *next_;$/;"	m	struct:OrderLevelEntry	access:public
order_book_	./FeedHandler.h	/^   OrderBook<ORDERIDTYPE, ORDERTYPE> order_book_;$/;"	m	class:OrderBook::FeedHandler	access:private
order_id_	./Utilities.h	/^   uint32_t order_id_;$/;"	m	struct:OrderLevelEntry	access:public
order_price_	./Utilities.h	/^   unsigned long long order_price_;$/;"	m	struct:OrderLevelEntry	access:public
order_qty_	./Utilities.h	/^   uint32_t order_qty_;$/;"	m	struct:OrderLevelEntry	access:public
order_side_	./Utilities.h	/^   Side order_side_;$/;"	m	struct:OrderLevelEntry	access:public
orders_	./OrderBook.h	/^   OrderHash orders_;$/;"	m	class:OrderBook::OrderBook	access:private
parseOrder	./MessageParser.h	/^   inline void parseOrder(char *tk_msg, OrderLevelEntry &ole);$/;"	p	class:OrderBook::MessageParser	access:public
parseOrder	./MessageParser.h	/^inline void MessageParser::parseOrder(char *tk_msg, OrderLevelEntry &ole) {$/;"	f	class:OrderBook::MessageParser
parseTrade	./MessageParser.h	/^   inline void parseTrade(char *tk_msg, TradeMessage &tm);$/;"	p	class:OrderBook::MessageParser	access:public
parseTrade	./MessageParser.h	/^inline void MessageParser::parseTrade(char *tk_msg, TradeMessage &tm) {$/;"	f	class:OrderBook::MessageParser
parser_	./FeedHandler.h	/^   MessageParser parser_;$/;"	m	class:OrderBook::FeedHandler	access:private
previous_	./Utilities.h	/^   OrderLevelEntry *previous_;$/;"	m	struct:OrderLevelEntry	access:public
print	./LagHistogram.h	/^   void print() {$/;"	f	class:LagHistogram	access:public
print	./Logger.h	/^   void print(std::string msg) {$/;"	f	class:Logger	access:public
printBook	./OrderBook.h	/^   void printBook() {$/;"	f	class:OrderBook::OrderBook	access:public
printBook	./OrderGenerator.pl	/^sub printBook {$/;"	s
printCurrentOrderBook	./FeedHandler.h	/^   void printCurrentOrderBook() {$/;"	f	class:OrderBook::FeedHandler	access:public
printLevel	./CountedOrderList.h	/^   void printLevel(char tag, char *&buffer, int &index, int &max_buffer) {$/;"	f	class:OrderBook::CountedOrderList	access:public
printList	./DLList.h	/^   void printList() {$/;"	f	class:OrderBook::DLList	access:public
printMessages	./Logger.h	/^   void printMessages() {$/;"	f	class:Logger	access:private
printMidpoint	./OrderBook.h	/^   void printMidpoint() {$/;"	f	class:OrderBook::OrderBook	access:public
printSelf	./Utilities.h	/^   void printSelf() {$/;"	f	struct:OrderLevelEntry	access:public
printSelf	./Utilities.h	/^   void printSelf() {$/;"	f	struct:TradeMessage	access:public
printStatistics	./FHErrorTracker.h	/^   void printStatistics() {$/;"	f	class:OrderBook::FHErrorTracker	access:public
processMessage	./FeedHandler.h	/^   void processMessage(char *line) {$/;"	f	class:OrderBook::FeedHandler	access:public
recent_trade_price_	./OrderBook.h	/^   unsigned long long recent_trade_price_;$/;"	m	class:OrderBook::OrderBook	access:private
recent_trade_qty_	./OrderBook.h	/^   uint32_t recent_trade_qty_;$/;"	m	class:OrderBook::OrderBook	access:private
remove	./OrderGenerator.pl	/^sub remove {$/;"	s
removeNode	./CountedOrderList.h	/^   void removeNode(NODE *input) {$/;"	f	class:OrderBook::CountedOrderList	access:public
removeNode	./DLList.h	/^   void removeNode(NODE *target) {$/;"	f	class:OrderBook::DLList	access:public
removeOrder	./OrderBook.h	/^   void removeOrder(OrderPtr &ole) {$/;"	f	class:OrderBook::OrderBook	access:public
removeOrderFromHash	./OrderGenerator.pl	/^sub removeOrderFromHash {$/;"	s
removeOrderFromLevel	./OrderGenerator.pl	/^sub removeOrderFromLevel {$/;"	s
remove_	./FeedHandler.h	/^   LagHistogram remove_;$/;"	m	class:OrderBook::FeedHandler	access:private
reportStatus	./MessageParser.h	/^   inline void reportStatus(ParseStatus status);$/;"	p	class:OrderBook::MessageParser	access:private
reportStatus	./MessageParser.h	/^inline void MessageParser::reportStatus(ParseStatus status) {$/;"	f	class:OrderBook::MessageParser
runLogger	./Logger.h	/^   void runLogger() {$/;"	f	class:Logger	access:public
safeCopyToBuffer	./Utilities.h	/^void safeCopyToBuffer(char *&dest_root, const char *source, int &index, int &max_buffer) {$/;"	f
samples_	./LagHistogram.h	/^   std::vector<uint64_t> samples_;$/;"	m	class:LagHistogram	access:private
sell_book_map_	./OrderBook.h	/^   OrderListMap sell_book_map_;$/;"	m	class:OrderBook::OrderBook	access:private
start	./HRTimer.h	/^   inline void start() {$/;"	f	class:OrderBook::HRTimer	access:public
start_	./HRTimer.h	/^   uint64_t start_;$/;"	m	class:OrderBook::HRTimer	access:private
stop	./HRTimer.h	/^   inline uint64_t stop() {$/;"	f	class:OrderBook::HRTimer	access:public
stopLogger	./Logger.h	/^   void stopLogger() {$/;"	f	class:Logger	access:public
tail_	./DLList.h	/^   NODE *tail_;$/;"	m	class:OrderBook::DLList	access:private
testDLListAddMultiple	./Tester.cpp	/^bool testDLListAddMultiple() {$/;"	f
testDLListCompilation	./Tester.cpp	/^bool testDLListCompilation() {$/;"	f
testDLListRemoveNodes	./Tester.cpp	/^bool testDLListRemoveNodes() {$/;"	f
testLogger	./Tester.cpp	/^bool testLogger() {$/;"	f
test_functions_	./Tester.cpp	/^std::vector<TestFunctionPair> test_functions_;$/;"	v
test_name_	./Tester.cpp	/^   std::string test_name_;$/;"	m	struct:TestFunctionPair	file:	access:public
thread_	./Logger.h	/^   std::thread *thread_;$/;"	m	class:Logger	access:private
timer_	./FeedHandler.h	/^   HRTimer timer_;$/;"	m	class:OrderBook::FeedHandler	access:private
title_	./LagHistogram.h	/^   std::string title_;$/;"	m	class:LagHistogram	access:private
tokenizeAndConvertToDouble	./MessageParser.h	/^   inline ParseStatus tokenizeAndConvertToDouble(char *tk_msg, double &dest);$/;"	p	class:OrderBook::MessageParser	access:private
tokenizeAndConvertToDouble	./MessageParser.h	/^inline ParseStatus MessageParser::tokenizeAndConvertToDouble(char *tk_msg, double &dest) {$/;"	f	class:OrderBook::MessageParser
tokenizeAndConvertToUint	./MessageParser.h	/^   inline ParseStatus tokenizeAndConvertToUint(char *tk_msg, uint32_t &dest);$/;"	p	class:OrderBook::MessageParser	access:private
tokenizeAndConvertToUint	./MessageParser.h	/^inline ParseStatus MessageParser::tokenizeAndConvertToUint(char *tk_msg, uint32_t &dest) {$/;"	f	class:OrderBook::MessageParser
trade	./OrderGenerator.pl	/^sub trade {$/;"	s
tradeMissing	./OrderGenerator.pl	/^sub tradeMissing {$/;"	s
tradeMissingOrders	./FHErrorTracker.h	/^   void tradeMissingOrders() { ++ trade_missing_orders_; }$/;"	f	class:OrderBook::FHErrorTracker	access:public
trade_	./FeedHandler.h	/^   LagHistogram trade_;$/;"	m	class:OrderBook::FeedHandler	access:private
trade_missing_orders_	./FHErrorTracker.h	/^   uint32_t trade_missing_orders_ = 0;$/;"	m	class:OrderBook::FHErrorTracker	access:private
trade_price_	./Utilities.h	/^   unsigned long long trade_price_;$/;"	m	struct:TradeMessage	access:public
trade_qty_	./Utilities.h	/^   uint32_t trade_qty_;$/;"	m	struct:TradeMessage	access:public
~CountedOrderList	./CountedOrderList.h	/^   virtual ~CountedOrderList() {}$/;"	f	class:OrderBook::CountedOrderList	access:public
~DLList	./DLList.h	/^   virtual ~DLList() { }$/;"	f	class:OrderBook::DLList	access:public
~FHErrorTracker	./FHErrorTracker.h	/^   ~FHErrorTracker() {$/;"	f	class:OrderBook::FHErrorTracker	access:public
~FeedHandler	./FeedHandler.h	/^   ~FeedHandler() {$/;"	f	class:OrderBook::FeedHandler	access:public
~Logger	./Logger.h	/^   ~Logger() {$/;"	f	class:Logger	access:public
~MessageParser	./MessageParser.h	/^   ~MessageParser() {}$/;"	f	class:OrderBook::MessageParser	access:public
~OrderBook	./OrderBook.h	/^   ~OrderBook() {$/;"	f	class:OrderBook::OrderBook	access:public
